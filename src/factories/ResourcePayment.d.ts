/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ResourcePaymentInterface extends ethers.utils.Interface {
	functions: {
		"MaxTotalExpiration()": FunctionFragment;
		"MinExpiration()": FunctionFragment;
		"addCombo((uint256,uint256,uint256,uint256,bool,string))": FunctionFragment;
		"addToken(address)": FunctionFragment;
		"buy(address,uint256,uint256,uint256)": FunctionFragment;
		"canBuy(address,uint256)": FunctionFragment;
		"canRenew(address)": FunctionFragment;
		"canUpgrade(address,uint256)": FunctionFragment;
		"channel()": FunctionFragment;
		"comboLength()": FunctionFragment;
		"combos(uint256)": FunctionFragment;
		"expiration(address)": FunctionFragment;
		"expirationAt(address)": FunctionFragment;
		"getComboCost(uint256,uint256)": FunctionFragment;
		"getUpgradeExchange(address,uint256)": FunctionFragment;
		"isExpired(address)": FunctionFragment;
		"lock()": FunctionFragment;
		"maxTotalRenewExpiration(address)": FunctionFragment;
		"maxTotalUpgradeExpiration(address,uint256)": FunctionFragment;
		"owner()": FunctionFragment;
		"receipts(address)": FunctionFragment;
		"removeToken(uint256)": FunctionFragment;
		"renew(address,uint256,uint256)": FunctionFragment;
		"renounceOwnership()": FunctionFragment;
		"setMaxTotalExpriation(uint256)": FunctionFragment;
		"setMinExpriation(uint256)": FunctionFragment;
		"sync()": FunctionFragment;
		"tokenLength()": FunctionFragment;
		"tokens(uint256)": FunctionFragment;
		"transferOwnership(address)": FunctionFragment;
		"transferRootChannel(address)": FunctionFragment;
		"unlock()": FunctionFragment;
		"updateCombo(uint256,(uint256,uint256,uint256,uint256,bool,string))": FunctionFragment;
		"upgrade(address,uint256,uint256,uint256)": FunctionFragment;
		"validateCombo(uint256)": FunctionFragment;
		"withdraw(address,address,uint256)": FunctionFragment;
	};

	encodeFunctionData(
		functionFragment: "MaxTotalExpiration",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "MinExpiration",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "addCombo",
		values: [
			{
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			}
		]
	): string;
	encodeFunctionData(functionFragment: "addToken", values: [string]): string;
	encodeFunctionData(
		functionFragment: "buy",
		values: [string, BigNumberish, BigNumberish, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "canBuy",
		values: [string, BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "canRenew", values: [string]): string;
	encodeFunctionData(
		functionFragment: "canUpgrade",
		values: [string, BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "channel", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "comboLength",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "combos",
		values: [BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "expiration", values: [string]): string;
	encodeFunctionData(
		functionFragment: "expirationAt",
		values: [string]
	): string;
	encodeFunctionData(
		functionFragment: "getComboCost",
		values: [BigNumberish, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "getUpgradeExchange",
		values: [string, BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "isExpired", values: [string]): string;
	encodeFunctionData(functionFragment: "lock", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "maxTotalRenewExpiration",
		values: [string]
	): string;
	encodeFunctionData(
		functionFragment: "maxTotalUpgradeExpiration",
		values: [string, BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "receipts", values: [string]): string;
	encodeFunctionData(
		functionFragment: "removeToken",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "renew",
		values: [string, BigNumberish, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "renounceOwnership",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "setMaxTotalExpriation",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "setMinExpriation",
		values: [BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "sync", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "tokenLength",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "tokens",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "transferOwnership",
		values: [string]
	): string;
	encodeFunctionData(
		functionFragment: "transferRootChannel",
		values: [string]
	): string;
	encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "updateCombo",
		values: [
			BigNumberish,
			{
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			}
		]
	): string;
	encodeFunctionData(
		functionFragment: "upgrade",
		values: [string, BigNumberish, BigNumberish, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "validateCombo",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "withdraw",
		values: [string, string, BigNumberish]
	): string;

	decodeFunctionResult(
		functionFragment: "MaxTotalExpiration",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "MinExpiration",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "addCombo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "canBuy", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "canRenew", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "canUpgrade", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "channel", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "comboLength",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "combos", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "expirationAt",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getComboCost",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getUpgradeExchange",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "maxTotalRenewExpiration",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "maxTotalUpgradeExpiration",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "receipts", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "removeToken",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "renounceOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "setMaxTotalExpriation",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "setMinExpriation",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "tokenLength",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "transferOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "transferRootChannel",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "updateCombo",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "validateCombo",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

	events: {
		"Buy(address,tuple)": EventFragment;
		"OwnershipTransferred(address,address)": EventFragment;
		"Renew(address,tuple)": EventFragment;
		"Upgrade(address,tuple)": EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "Renew"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "Upgrade"): EventFragment;
}

export type BuyEvent = TypedEvent<
	[
		string,
		[
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			}
		] & {
			level: BigNumber;
			boughtTime: BigNumber;
			expiration: BigNumber;
			expectedCost: BigNumber;
			realCost: BigNumber;
			combo: [BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			};
		}
	] & {
		to: string;
		receipt: [
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			}
		] & {
			level: BigNumber;
			boughtTime: BigNumber;
			expiration: BigNumber;
			expectedCost: BigNumber;
			realCost: BigNumber;
			combo: [BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			};
		};
	}
>;

export type OwnershipTransferredEvent = TypedEvent<
	[string, string] & { previousOwner: string; newOwner: string }
>;

export type RenewEvent = TypedEvent<
	[
		string,
		[
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			}
		] & {
			level: BigNumber;
			boughtTime: BigNumber;
			expiration: BigNumber;
			expectedCost: BigNumber;
			realCost: BigNumber;
			combo: [BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			};
		}
	] & {
		to: string;
		receipt: [
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			}
		] & {
			level: BigNumber;
			boughtTime: BigNumber;
			expiration: BigNumber;
			expectedCost: BigNumber;
			realCost: BigNumber;
			combo: [BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			};
		};
	}
>;

export type UpgradeEvent = TypedEvent<
	[
		string,
		[
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			}
		] & {
			level: BigNumber;
			boughtTime: BigNumber;
			expiration: BigNumber;
			expectedCost: BigNumber;
			realCost: BigNumber;
			combo: [BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			};
		}
	] & {
		to: string;
		receipt: [
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			}
		] & {
			level: BigNumber;
			boughtTime: BigNumber;
			expiration: BigNumber;
			expectedCost: BigNumber;
			realCost: BigNumber;
			combo: [BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			};
		};
	}
>;

export class ResourcePayment extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: ResourcePaymentInterface;

	functions: {
		MaxTotalExpiration(overrides?: CallOverrides): Promise<[BigNumber]>;

		MinExpiration(overrides?: CallOverrides): Promise<[BigNumber]>;

		addCombo(
			combo: {
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			},
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		addToken(
			token: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		buy(
			to: string,
			tokenIndex: BigNumberish,
			level: BigNumberish,
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		canBuy(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		canRenew(to: string, overrides?: CallOverrides): Promise<[boolean]>;

		canUpgrade(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		channel(overrides?: CallOverrides): Promise<[string]>;

		comboLength(overrides?: CallOverrides): Promise<[BigNumber]>;

		combos(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			}
		>;

		expiration(to: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		expirationAt(to: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		getComboCost(
			level: BigNumberish,
			expiration_: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber] & { cost: BigNumber }>;

		getUpgradeExchange(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber] & { expiration_: BigNumber }>;

		isExpired(to: string, overrides?: CallOverrides): Promise<[boolean]>;

		lock(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		maxTotalRenewExpiration(
			to: string,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		maxTotalUpgradeExpiration(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		owner(overrides?: CallOverrides): Promise<[string]>;

		receipts(
			arg0: string,
			overrides?: CallOverrides
		): Promise<
			[
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
					bandwidth: BigNumber;
					storageAmount: BigNumber;
					buildingTime: BigNumber;
					pricePerMonth: BigNumber;
					isValid: boolean;
					name: string;
				}
			] & {
				level: BigNumber;
				boughtTime: BigNumber;
				expiration: BigNumber;
				expectedCost: BigNumber;
				realCost: BigNumber;
				combo: [BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
					bandwidth: BigNumber;
					storageAmount: BigNumber;
					buildingTime: BigNumber;
					pricePerMonth: BigNumber;
					isValid: boolean;
					name: string;
				};
			}
		>;

		removeToken(
			index: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		renew(
			to: string,
			tokenIndex: BigNumberish,
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setMaxTotalExpriation(
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setMinExpriation(
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		sync(overrides?: CallOverrides): Promise<[string]>;

		tokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

		tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		transferRootChannel(
			_channel: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		unlock(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		updateCombo(
			level: BigNumberish,
			combo: {
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			},
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		upgrade(
			to: string,
			tokenIndex: BigNumberish,
			level: BigNumberish,
			moreExpiration: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		validateCombo(
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<[void]>;

		withdraw(
			token: string,
			to: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;
	};

	MaxTotalExpiration(overrides?: CallOverrides): Promise<BigNumber>;

	MinExpiration(overrides?: CallOverrides): Promise<BigNumber>;

	addCombo(
		combo: {
			bandwidth: BigNumberish;
			storageAmount: BigNumberish;
			buildingTime: BigNumberish;
			pricePerMonth: BigNumberish;
			isValid: boolean;
			name: string;
		},
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	addToken(
		token: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	buy(
		to: string,
		tokenIndex: BigNumberish,
		level: BigNumberish,
		expiration_: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	canBuy(
		to: string,
		level: BigNumberish,
		overrides?: CallOverrides
	): Promise<boolean>;

	canRenew(to: string, overrides?: CallOverrides): Promise<boolean>;

	canUpgrade(
		to: string,
		level: BigNumberish,
		overrides?: CallOverrides
	): Promise<boolean>;

	channel(overrides?: CallOverrides): Promise<string>;

	comboLength(overrides?: CallOverrides): Promise<BigNumber>;

	combos(
		arg0: BigNumberish,
		overrides?: CallOverrides
	): Promise<
		[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
			bandwidth: BigNumber;
			storageAmount: BigNumber;
			buildingTime: BigNumber;
			pricePerMonth: BigNumber;
			isValid: boolean;
			name: string;
		}
	>;

	expiration(to: string, overrides?: CallOverrides): Promise<BigNumber>;

	expirationAt(to: string, overrides?: CallOverrides): Promise<BigNumber>;

	getComboCost(
		level: BigNumberish,
		expiration_: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	getUpgradeExchange(
		to: string,
		level: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	isExpired(to: string, overrides?: CallOverrides): Promise<boolean>;

	lock(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	maxTotalRenewExpiration(
		to: string,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	maxTotalUpgradeExpiration(
		to: string,
		level: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	owner(overrides?: CallOverrides): Promise<string>;

	receipts(
		arg0: string,
		overrides?: CallOverrides
	): Promise<
		[
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			BigNumber,
			[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			}
		] & {
			level: BigNumber;
			boughtTime: BigNumber;
			expiration: BigNumber;
			expectedCost: BigNumber;
			realCost: BigNumber;
			combo: [BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			};
		}
	>;

	removeToken(
		index: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	renew(
		to: string,
		tokenIndex: BigNumberish,
		expiration_: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	renounceOwnership(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setMaxTotalExpriation(
		expiration_: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setMinExpriation(
		expiration_: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	sync(overrides?: CallOverrides): Promise<string>;

	tokenLength(overrides?: CallOverrides): Promise<BigNumber>;

	tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

	transferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	transferRootChannel(
		_channel: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	unlock(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	updateCombo(
		level: BigNumberish,
		combo: {
			bandwidth: BigNumberish;
			storageAmount: BigNumberish;
			buildingTime: BigNumberish;
			pricePerMonth: BigNumberish;
			isValid: boolean;
			name: string;
		},
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	upgrade(
		to: string,
		tokenIndex: BigNumberish,
		level: BigNumberish,
		moreExpiration: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	validateCombo(level: BigNumberish, overrides?: CallOverrides): Promise<void>;

	withdraw(
		token: string,
		to: string,
		amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	callStatic: {
		MaxTotalExpiration(overrides?: CallOverrides): Promise<BigNumber>;

		MinExpiration(overrides?: CallOverrides): Promise<BigNumber>;

		addCombo(
			combo: {
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			},
			overrides?: CallOverrides
		): Promise<void>;

		addToken(token: string, overrides?: CallOverrides): Promise<void>;

		buy(
			to: string,
			tokenIndex: BigNumberish,
			level: BigNumberish,
			expiration_: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		canBuy(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<boolean>;

		canRenew(to: string, overrides?: CallOverrides): Promise<boolean>;

		canUpgrade(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<boolean>;

		channel(overrides?: CallOverrides): Promise<string>;

		comboLength(overrides?: CallOverrides): Promise<BigNumber>;

		combos(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
				bandwidth: BigNumber;
				storageAmount: BigNumber;
				buildingTime: BigNumber;
				pricePerMonth: BigNumber;
				isValid: boolean;
				name: string;
			}
		>;

		expiration(to: string, overrides?: CallOverrides): Promise<BigNumber>;

		expirationAt(to: string, overrides?: CallOverrides): Promise<BigNumber>;

		getComboCost(
			level: BigNumberish,
			expiration_: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		getUpgradeExchange(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		isExpired(to: string, overrides?: CallOverrides): Promise<boolean>;

		lock(overrides?: CallOverrides): Promise<void>;

		maxTotalRenewExpiration(
			to: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		maxTotalUpgradeExpiration(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<string>;

		receipts(
			arg0: string,
			overrides?: CallOverrides
		): Promise<
			[
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
					bandwidth: BigNumber;
					storageAmount: BigNumber;
					buildingTime: BigNumber;
					pricePerMonth: BigNumber;
					isValid: boolean;
					name: string;
				}
			] & {
				level: BigNumber;
				boughtTime: BigNumber;
				expiration: BigNumber;
				expectedCost: BigNumber;
				realCost: BigNumber;
				combo: [BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
					bandwidth: BigNumber;
					storageAmount: BigNumber;
					buildingTime: BigNumber;
					pricePerMonth: BigNumber;
					isValid: boolean;
					name: string;
				};
			}
		>;

		removeToken(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

		renew(
			to: string,
			tokenIndex: BigNumberish,
			expiration_: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		renounceOwnership(overrides?: CallOverrides): Promise<void>;

		setMaxTotalExpriation(
			expiration_: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		setMinExpriation(
			expiration_: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		sync(overrides?: CallOverrides): Promise<string>;

		tokenLength(overrides?: CallOverrides): Promise<BigNumber>;

		tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

		transferOwnership(
			newOwner: string,
			overrides?: CallOverrides
		): Promise<void>;

		transferRootChannel(
			_channel: string,
			overrides?: CallOverrides
		): Promise<void>;

		unlock(overrides?: CallOverrides): Promise<void>;

		updateCombo(
			level: BigNumberish,
			combo: {
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			},
			overrides?: CallOverrides
		): Promise<void>;

		upgrade(
			to: string,
			tokenIndex: BigNumberish,
			level: BigNumberish,
			moreExpiration: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		validateCombo(
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		withdraw(
			token: string,
			to: string,
			amount: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;
	};

	filters: {
		"Buy(address,tuple)"(
			to?: string | null,
			receipt?: null
		): TypedEventFilter<
			[
				string,
				[
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				}
			],
			{
				to: string;
				receipt: [
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				};
			}
		>;

		Buy(
			to?: string | null,
			receipt?: null
		): TypedEventFilter<
			[
				string,
				[
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				}
			],
			{
				to: string;
				receipt: [
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				};
			}
		>;

		"OwnershipTransferred(address,address)"(
			previousOwner?: string | null,
			newOwner?: string | null
		): TypedEventFilter<
			[string, string],
			{ previousOwner: string; newOwner: string }
		>;

		OwnershipTransferred(
			previousOwner?: string | null,
			newOwner?: string | null
		): TypedEventFilter<
			[string, string],
			{ previousOwner: string; newOwner: string }
		>;

		"Renew(address,tuple)"(
			to?: string | null,
			receipt?: null
		): TypedEventFilter<
			[
				string,
				[
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				}
			],
			{
				to: string;
				receipt: [
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				};
			}
		>;

		Renew(
			to?: string | null,
			receipt?: null
		): TypedEventFilter<
			[
				string,
				[
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				}
			],
			{
				to: string;
				receipt: [
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				};
			}
		>;

		"Upgrade(address,tuple)"(
			to?: string | null,
			receipt?: null
		): TypedEventFilter<
			[
				string,
				[
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				}
			],
			{
				to: string;
				receipt: [
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				};
			}
		>;

		Upgrade(
			to?: string | null,
			receipt?: null
		): TypedEventFilter<
			[
				string,
				[
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				}
			],
			{
				to: string;
				receipt: [
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					[BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					}
				] & {
					level: BigNumber;
					boughtTime: BigNumber;
					expiration: BigNumber;
					expectedCost: BigNumber;
					realCost: BigNumber;
					combo: [
						BigNumber,
						BigNumber,
						BigNumber,
						BigNumber,
						boolean,
						string
					] & {
						bandwidth: BigNumber;
						storageAmount: BigNumber;
						buildingTime: BigNumber;
						pricePerMonth: BigNumber;
						isValid: boolean;
						name: string;
					};
				};
			}
		>;
	};

	estimateGas: {
		MaxTotalExpiration(overrides?: CallOverrides): Promise<BigNumber>;

		MinExpiration(overrides?: CallOverrides): Promise<BigNumber>;

		addCombo(
			combo: {
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			},
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		addToken(
			token: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		buy(
			to: string,
			tokenIndex: BigNumberish,
			level: BigNumberish,
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		canBuy(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		canRenew(to: string, overrides?: CallOverrides): Promise<BigNumber>;

		canUpgrade(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		channel(overrides?: CallOverrides): Promise<BigNumber>;

		comboLength(overrides?: CallOverrides): Promise<BigNumber>;

		combos(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		expiration(to: string, overrides?: CallOverrides): Promise<BigNumber>;

		expirationAt(to: string, overrides?: CallOverrides): Promise<BigNumber>;

		getComboCost(
			level: BigNumberish,
			expiration_: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		getUpgradeExchange(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		isExpired(to: string, overrides?: CallOverrides): Promise<BigNumber>;

		lock(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		maxTotalRenewExpiration(
			to: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		maxTotalUpgradeExpiration(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<BigNumber>;

		receipts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		removeToken(
			index: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		renew(
			to: string,
			tokenIndex: BigNumberish,
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setMaxTotalExpriation(
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setMinExpriation(
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		sync(overrides?: CallOverrides): Promise<BigNumber>;

		tokenLength(overrides?: CallOverrides): Promise<BigNumber>;

		tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		transferRootChannel(
			_channel: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		unlock(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		updateCombo(
			level: BigNumberish,
			combo: {
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			},
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		upgrade(
			to: string,
			tokenIndex: BigNumberish,
			level: BigNumberish,
			moreExpiration: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		validateCombo(
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		withdraw(
			token: string,
			to: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;
	};

	populateTransaction: {
		MaxTotalExpiration(
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		MinExpiration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		addCombo(
			combo: {
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			},
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		addToken(
			token: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		buy(
			to: string,
			tokenIndex: BigNumberish,
			level: BigNumberish,
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		canBuy(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		canRenew(
			to: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		canUpgrade(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		channel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		comboLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		combos(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		expiration(
			to: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		expirationAt(
			to: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		getComboCost(
			level: BigNumberish,
			expiration_: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		getUpgradeExchange(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		isExpired(
			to: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		lock(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		maxTotalRenewExpiration(
			to: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		maxTotalUpgradeExpiration(
			to: string,
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		receipts(
			arg0: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		removeToken(
			index: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		renew(
			to: string,
			tokenIndex: BigNumberish,
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setMaxTotalExpriation(
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setMinExpriation(
			expiration_: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		sync(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		tokenLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		tokens(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		transferRootChannel(
			_channel: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		unlock(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		updateCombo(
			level: BigNumberish,
			combo: {
				bandwidth: BigNumberish;
				storageAmount: BigNumberish;
				buildingTime: BigNumberish;
				pricePerMonth: BigNumberish;
				isValid: boolean;
				name: string;
			},
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		upgrade(
			to: string,
			tokenIndex: BigNumberish,
			level: BigNumberish,
			moreExpiration: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		validateCombo(
			level: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		withdraw(
			token: string,
			to: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;
	};
}
